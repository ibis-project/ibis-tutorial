---
title: Demo de Ibis
---

Primero, importar Ibis:

```{python}
import ibis
from ibis import *
```

## Conectar a DuckDB

```{python}
con = ibis.duckdb.connect()
```

## Cargar unos datos adentro de las tablas

```{python}
ratings = con.read_parquet("data/imdb_title_ratings.parquet", table_name="ratings")
basics = con.read_parquet("data/imdb_title_basics.parquet", table_name="basics")
```

Podemos presentar los nombres de las tablas

```{python}
con.list_tables()
```

Y les renderizamos:

```{python}
ratings
```

```{python}
basics
```

Ahora, ejecutamos con un limite

```{python}
ratings.execute(limit=10)
```

Ibis funciona con muchas formatos en memoría, se incluye Pandas y PyArrow

```{python}
basics.to_pandas(limit=10)
```

```{python}
ratings.to_pyarrow(limit=10)
```

Y Polars, si usted lo tiene installado.

```{python}
#to show this we will need to install polars
#basics.to_polars()
```

## Properly named columns and interactive mode

A veces, ustedes tienen columnas que tienen nombres sucios, y así que ustedes les necesitan limpiar.

Ibis puede ayudarse con eso.

```{python}
ibis.options.interactive = True
```

```{python}
basics = basics.rename("snake_case")
```

```{python}
ratings = ratings.rename("snake_case")
```

```{python}
ratings
```

```{python}
basics
```

## Casting

```{python}
ratings.select(avg_rating=ratings.average_rating.cast("float"))
```

```{python}
ratings.select(
    avg_rating=ratings.average_rating.cast("float"),
    num_votes=ratings.num_votes.cast("int"),
)
```

```{python}
ratings = ratings.select(
    ratings.tconst,
    avg_rating=ratings.average_rating.cast("float"),
    num_votes=ratings.num_votes.cast("int"),
)
```

## `to_sql()`

Y cuando quiere ver la SQL, tenemos el método `to_sql`:

```{python}
ibis.to_sql(ratings)
```

```{python}
ibis.to_sql(ratings, dialect="sqlite") # this will show different types in casting when casting makes sense
```

```{python}
ibis.options.interactive = False
```

## `.sql`

El próximo, tenemos el método `.sql()` y este método es para escribiendo SQL crudo:

A veces, usted necesita escribir SQL.

```{python}
con.sql("""
        SELECT
        "t0"."tconst",
        CAST("t0"."averageRating" AS VARCHAR) AS "avg_rating",
        CAST("t0"."numVotes" AS VARCHAR) AS "num_votes"
        FROM "ratings" AS "t0"
    """)
```

```{python}
con.sql("""
        SELECT
        "t0"."tconst",
        CAST("t0"."averageRating" AS VARCHAR) AS "avg_rating",
        CAST("t0"."numVotes" AS VARCHAR) AS "num_votes"
        FROM "ratings" AS "t0"
    """).execute()
```

```{python}
ibis.options.interactive = True
```

```{python}
con.sql("""
        SELECT
        "t0"."tconst",
        CAST("t0"."averageRating" AS VARCHAR) AS "avg_rating",
        CAST("t0"."numVotes" AS VARCHAR) AS "num_votes"
        FROM "ratings" AS "t0"
    """)
```

## Otras operaciones

```{python}
basics.columns
```

Para "GROUP BY" con `count()` tenemos el método `value_counts()`

```{python}
basics.title_type.value_counts()
```

```{python}
basics = (
    basics
    .filter([basics.title_type == "movie", basics.is_adult == 0])
    .select("tconst", "primary_title")
)
```

```{python}
basics
```

Ahora, unimos la tabla basics y la tabla ratings con la columna "tconst" y entonces ejecutarlo.

```{python}
basics.join(ratings, "tconst").execute(limit=10)
```

```{python}
basics.join(ratings, "tconst").order_by(_.avg_rating.desc())
```

```{python}
basics.join(ratings, "tconst").order_by(_.avg_rating.desc()).filter(_.num_votes > 1e6)
```

## `join` tables

Finalmente, mostramos la expreción entero para computar las películas arribas diez.

```{python}
topfilms = basics.join(ratings, "tconst").order_by(_.avg_rating.desc()).filter(_.num_votes > 1e6)
```

```{python}
ibis.options.interactive = False
```

```{python}
topfilms
```

```{python}
topfilms.execute(limit=10)
```

Ya está! Eso es Ibis!
