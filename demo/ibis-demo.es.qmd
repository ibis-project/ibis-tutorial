---
title: Demo de Ibis
---

Primero, importar Ibis:

```{python}
import ibis
from ibis import *
```

## Conectar a DuckDB

```{python}
con = ibis.duckdb.connect()
```

## Cargar unos datos adentro de las tablas


```{python}
!curl -OLsS 'https://storage.googleapis.com/ibis-tutorial-data/imdb/2024-03-22/imdb_title_ratings.parquet'
!curl -OLsS 'https://storage.googleapis.com/ibis-tutorial-data/imdb/2024-03-22/imdb_title_basics.parquet'
```

```{python}
ratings = con.read_parquet("imdb_title_ratings.parquet", table_name="imdb_title_ratings")
basics = con.read_parquet("imdb_title_basics.parquet", table_name="imdb_title_basics")
```

Podemos presentar los nombres de las tablas

```{python}
con.list_tables()
```

Y renderizamos un versión abstracta de la expresión con nombres columnas y tipos:

```{python}
ratings
```

```{python}
basics
```

Ahora, ejecutamos con un límite

```{python}
ratings.execute(limit=10)
```

Ibis funciona con muchos formatos en memoria, incluyendo Pandas y PyArrow

```{python}
basics.to_pandas(limit=10)
```

```{python}
ratings.to_pyarrow(limit=10)
```

Y Polars con el método `to_polars()`, si ustedes lo tienen instalado.

```{python}
ratings.to_polars(limit=10)
```

## Columnas con nombres adecuados, y modo interactivo.

A veces, ustedes tienen columnas que tienen nombres sucios, y así que necesitan limpiarlos.

Ibis puede ayudarte con eso.

```{python}
ibis.options.interactive = True
```

```{python}
basics = basics.rename("snake_case")
```

```{python}
ratings = ratings.rename("snake_case")
```

```{python}
ratings
```

```{python}
basics
```

## Casting

```{python}
ratings.select(avg_rating=ratings.average_rating.cast("float"))
```

```{python}
ratings.select(
    avg_rating=ratings.average_rating.cast("float"),
    num_votes=ratings.num_votes.cast("int"),
)
```

```{python}
ratings = ratings.select(
    ratings.tconst,
    avg_rating=ratings.average_rating.cast("float"),
    num_votes=ratings.num_votes.cast("int"),
)
```

## `to_sql()`

Y cuando quiere ver el SQL, tenemos el funcion `to_sql`:

```{python}
ibis.to_sql(ratings)
```

```{python}
ibis.to_sql(ratings, dialect="sqlite")
```

```{python}
ibis.options.interactive = False
```

## `.sql`

Luego, tenemos el método `.sql()` y este método es para escribir SQL crudo:

A veces, usted necesita escribir SQL.

```{python}
con.sql("""
        SELECT
        "t0"."tconst",
        CAST("t0"."averageRating" AS VARCHAR) AS "avg_rating",
        CAST("t0"."numVotes" AS VARCHAR) AS "num_votes"
        FROM "imdb_title_ratings" AS "t0"
    """)
```

```{python}
con.sql("""
        SELECT
        "t0"."tconst",
        CAST("t0"."averageRating" AS VARCHAR) AS "avg_rating",
        CAST("t0"."numVotes" AS VARCHAR) AS "num_votes"
        FROM "imdb_title_ratings" AS "t0"
    """).execute()
```

```{python}
ibis.options.interactive = True
```

```{python}
con.sql("""
        SELECT
        "t0"."tconst",
        CAST("t0"."averageRating" AS VARCHAR) AS "avg_rating",
        CAST("t0"."numVotes" AS VARCHAR) AS "num_votes"
        FROM "imdb_title_ratings" AS "t0"
    """)
```

## Otras operaciones

```{python}
basics.columns
```

Para "GROUP BY" con `count()` tenemos el método `value_counts()`

```{python}
basics.title_type.value_counts()
```

Para nuestros análisis final, vamos a limipiar unas cosas como seleccionando
solo títulos con el tipo "película" y desechando las películas adultas.

Hacemos esto con una lista de predicados:

```{python}
basics = (
    basics
    .filter([basics.title_type == "movie", basics.is_adult == 0])
    .select("tconst", "primary_title")
)
```

```{python}
basics
```

Ahora, unimos la tabla `basics` y la tabla `ratings` con la columna `tconst`, y ejecutamos.

```{python}
basics.join(ratings, "tconst").execute(limit=10)
```

Ordenamos por `avg_rating`

```{python}
basics.join(ratings, "tconst").order_by(_.avg_rating.desc())
```

Y filtramos los títulos con votos menos que un millón.

```{python}
basics.join(ratings, "tconst").order_by(_.avg_rating.desc()).filter(_.num_votes > 1e6)
```

## Unión de tablas (`join`)

Finalmente, mostramos la expresión entera para computar las diez mejores películas.

```{python}
topfilms = basics.join(ratings, "tconst").order_by(_.avg_rating.desc()).filter(_.num_votes > 1e6)
```

```{python}
ibis.options.interactive = False
```

```{python}
topfilms
```

```{python}
topfilms.execute(limit=10)
```

## ¡Ejecutamos la misma expresión en Postgres!

### Conectar a Postgres con Ibis

```{python}
pgcon = ibis.postgres.connect()
pgcon.list_tables()
```

### Poner los datos adentro de Postgres

```{python}
!psql < create_imdb.sql
!duckdb < load_imdb.sql
```

### Ahora, asegurar que las tablas existan

```{python}
pgcon.list_tables()
```

Ejecutamos la misma expresión en Postgres:

```{python}
pgcon.execute(topfilms)
```

Ya está! Y eso es Ibis!

Ibis tiene muchos backends como Snowflake, DuckDB (lo que está aquí), y más.
