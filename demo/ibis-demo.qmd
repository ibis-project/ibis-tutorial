---
title: Get a DuckDB connection
jupyter: python3
---

```{python}
import ibis
from ibis import *
```



```{python}
con = ibis.duckdb.connect()
```

## Get some data into tables

```{python}
ratings = con.read_parquet("data/imdb_title_ratings.parquet", table_name="ratings")
basics = con.read_parquet("data/imdb_title_basics.parquet", table_name="basics")
```

```{python}
con.list_tables()
```

```{python}
ratings
```

```{python}
basics
```

```{python}
ratings.execute(limit=10)
```

```{python}
basics.to_pandas(limit=10)
```

```{python}
ratings.to_pyarrow(limit=10)
```

```{python}
#to show this we will need to install polars 
#basics.to_polars()
```

## Properly named columns and interactive mode

```{python}
ibis.options.interactive = True
```

```{python}
basics = basics.rename("snake_case")
```

```{python}
ratings = ratings.rename("snake_case")
```

```{python}
ratings
```

```{python}
basics
```

## Casting

```{python}
ratings.select(avg_rating=ratings.average_rating.cast("float"))
```

```{python}
ratings.select(
    avg_rating=ratings.average_rating.cast("float"),
    num_votes=ratings.num_votes.cast("int"),
)
```

```{python}
ratings = ratings.select(
    ratings.tconst,
    avg_rating=ratings.average_rating.cast("float"),
    num_votes=ratings.num_votes.cast("int"),
)
```

## `to_sql()`

```{python}
ibis.to_sql(ratings)
```

```{python}
ibis.to_sql(ratings, dialect="sqlite") # this will show different types in casting when casting makes sense
```

```{python}
ibis.options.interactive = False
```

## `.sql`

```{python}
con.sql("""
        SELECT
        "t0"."tconst",
        CAST("t0"."averageRating" AS VARCHAR) AS "avg_rating",
        CAST("t0"."numVotes" AS VARCHAR) AS "num_votes"
        FROM "ratings" AS "t0"
    """)
```

```{python}
con.sql("""
        SELECT
        "t0"."tconst",
        CAST("t0"."averageRating" AS VARCHAR) AS "avg_rating",
        CAST("t0"."numVotes" AS VARCHAR) AS "num_votes"
        FROM "ratings" AS "t0"
    """).execute()
```

```{python}
ibis.options.interactive = True
```

```{python}
con.sql("""
        SELECT
        "t0"."tconst",
        CAST("t0"."averageRating" AS VARCHAR) AS "avg_rating",
        CAST("t0"."numVotes" AS VARCHAR) AS "num_votes"
        FROM "ratings" AS "t0"
    """)
```

## Other basic operations

```{python}
basics.columns
```

```{python}
basics.title_type.value_counts()
```

```{python}
basics.is_adult.value_counts()
```

```{python}
basics = basics.filter([basics.title_type == "movie", basics.is_adult == 0]).select("tconst", 
                                                                                    "primary_title", 
                                                                                    )
```

```{python}
basics
```

```{python}
basics.join(ratings, "tconst").execute(limit=10)
```

```{python}
basics.join(ratings, "tconst").order_by(_.avg_rating.desc())
```

```{python}
basics.join(ratings, "tconst").order_by(_.avg_rating.desc()).filter(_.num_votes > 1e6)
```

## `join` tables

```{python}
topfilms = basics.join(ratings, "tconst").order_by(_.avg_rating.desc()).filter(_.num_votes > 1e6)
```

```{python}
ibis.options.interactive = False
```

```{python}
topfilms
```

```{python}
topfilms.execute(limit=10)
```

## UDFs

```{python}
@ibis.udf.scalar.builtin
def jaccard(s1: str, s2: str) -> float:
    ...
```

```{python}
expr = jaccard(topfilms.primary_title, "The Godmother")
```

```{python}
expr.execute(limit=10)
```

```{python}
ibis.to_sql(expr)
```

```{python}
expr2 = topfilms.select(_.primary_title, jaccard=jaccard(_.primary_title, "The Gothfather")).order_by(_.jaccard.desc())
```

```{python}
expr2.execute(limit=10)
```

## Connect from other backends

```{python}
#con2 = ibis.postgres.connect(port=5438, user="postgres", password="postgres") #probably need to change port
```

```{python}
#con2.execute(topfilms, limit=10)
```

```{python}
#con3 = ibis.sqlite.connect("") or mysql, not sure what we want to show
```

```{python}
#con3.execute(topfilms, limit=10)
```


